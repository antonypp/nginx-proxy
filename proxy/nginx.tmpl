# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
    default upgrade;
    ''      '';
}

server {
    listen 80 default_server;
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    error_log /proc/self/fd/2;
    access_log /proc/self/fd/1;
    return 503;
    server_tokens off;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
upstream {{ $host }} {

{{ range $index, $value := $containers }}

    {{ $addrLen := len $value.Addresses }}
    {{/* If only 1 port exposed, use that */}}
    {{ if eq $addrLen 1 }}
        {{ with $address := index $value.Addresses 0 }}
           # {{$value.Name}}
           server {{ $value.Name }}:{{ $address.Port }};
        {{ end }}

    {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
    {{ else if $value.Env.VIRTUAL_PORT }}
        {{ range $i, $address := $value.Addresses }}
           {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
           # {{$value.Name}}
           server {{ $value.Name }}:{{ $address.Port }};
           {{ end }}
        {{ end }}

    {{/* Else default to standard web port 80 */}}
    {{ else }}
        {{ range $i, $address := $value.Addresses }}
            {{ if eq $address.Port "80" }}
            # {{$value.Name}}
            server {{ $value.Name }}:{{ $address.Port }};
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}
}

server {
    server_name {{ $host }};
{{ range $index, $value := $containers }}
    {{ if $value.Env.SSL }}
        listen  80;
        listen  443 ssl;
        ssl_certificate /certs/{{ $host }}.crt;
        ssl_certificate_key /certs/{{ $host }}.key;

        ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
        ssl_session_timeout 5m;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ecdh_curve secp521r1;
        
        {{ if $value.Env.FORCE_SSL }}
            if ($ssl_protocol = "") {
                return 301 https://{{ $host }}$request_uri;
            }
        {{ end }}
    {{ end }}
{{ end }}
    error_log /proc/self/fd/2;
    access_log /proc/self/fd/1;
    server_tokens off;
    client_max_body_size 20M;

    location / {
        proxy_pass http://{{ $host }};

        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

        # HTTP 1.1 support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $proxy_connection;
    }
}
{{ end }}

server {
    server_name {{ .Env.DEFAULT_VHOST }};
{{ if .Env.DEFAULT_SSL }}
    listen  80;
    listen  443 default ssl;
        ssl_certificate /certs/{{ .Env.DEFAULT_VHOST }}.crt;
        ssl_certificate_key /certs/{{ .Env.DEFAULT_VHOST }}.key;

        ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
        ssl_session_timeout 5m;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ecdh_curve secp521r1;

    {{ if .Env.DEFAULT_FORCE_SSL }}
        if ($ssl_protocol = "") {
            return 301 https://{{ .Env.DEFAULT_VHOST }}$request_uri;
        }
    {{ end }}
{{ end }}
    error_log /proc/self/fd/2;
    access_log /proc/self/fd/1;
    server_tokens off;
    client_max_body_size 20M;

    location / {
        proxy_pass http://default_vhost:8080;

        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

        # HTTP 1.1 support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $proxy_connection;
    }
}
